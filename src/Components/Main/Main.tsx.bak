import React, { useState } from 'react'
import { useDispatch } from 'react-redux';
import { BooksReducerType, loadMoreBooks, requestBooks, setCategories, setSearchValue, setSorting, setStartIndex } from '../../store/books-reducer';
import { Select } from './Select/Select';
import styles from './Main.module.scss';
import { Search } from './Search/Search';
import { Navigate, Route, Routes } from 'react-router-dom';
import { DetailedBookInfo } from './Books/DetailedBookInfo/DetailedBookInfo';
import { BookType } from '../../api/api';


type PropsType = {
    booksReducer: BooksReducerType
}

export const Main: React.FC<PropsType> = ({ booksReducer }) => {

    const dispatch = useDispatch<any>()

    const b = booksReducer
    const value = b.searchValue
    const sorting = b.sorting
    const categories = b.categories
    const startIndex = b.startIndex

    let [sortedBooks, setSortedBooks] = useState([] as BookType[])

    if (b.books.length > 0) {
        console.log(b.books, 'LKSADOLKODGSKL');
        if (categories === 'all') {
            dispatch(setSortedBooks(b.books))
        }
    }

    console.log(b.books);
    console.log(categories);
    console.log(startIndex);
    console.log(sortedBooks)

    const onClickSearchHandler = () => {
        dispatch(setStartIndex(0))
        dispatch(requestBooks(value, sorting, startIndex))
    }
    const handleSelectSorting = (sortingValue: string) => {
        const newvalue = sortingValue
        dispatch(setSorting(newvalue))
        dispatch(requestBooks(newvalue, sorting, startIndex))
    }
    const handleSelectCategories = (categoriesValue: string) => {
        const newCategory = categoriesValue
        dispatch(setCategories(newCategory))
        dispatch(requestBooks(value, sorting, startIndex))

        // if (newCategory === 'all') {
        //     return
        // } else {
        //     do {
        //         const newIndex = +30
        //         dispatch(setStartIndex(newIndex))
        //         dispatch(loadMoreCategoriesBooks(value, sorting, newIndex))

        //         let filtered = categoriesBooks.filter(b => {
        //             if (b.volumeInfo.categories) {
        //                 return b.volumeInfo.categories[0] === newCategory
        //             } else return false
        //         })

        //         //{ ...state, books: [...state.books, ...action.books] }
        //         setSortedBooks([...filtered])
        //         console.log(startIndex);
        //         console.log(categories.length);
        //     } while (sortedBooks.length < 30)
        // }
        console.log(startIndex);
        console.log(categories.length);
    }
    const onKeyPressInputHandler = (code: string) => {
        if (code === 'Enter') {
            dispatch(requestBooks(value, sorting, startIndex))
        }
    }
    const onChangeInputHandler = (inputValue: string) => {
        dispatch(setSearchValue(inputValue))
    }
    const onIndexChanged = (indexValue: number) => {
        const newIndex = indexValue + startIndex
        dispatch(setStartIndex(newIndex))
        dispatch(loadMoreBooks(value, sorting, newIndex))
    }

    if (!booksReducer.books?.length) {
        return <Search value={value}
            onClickSearchHandler={onClickSearchHandler}
            onChangeInputHandler={onChangeInputHandler}
            onKeyPressInputHandler={onKeyPressInputHandler}
        />

    } else {
        return (
            <div className={styles.main}>
                <Search value={value}
                    onClickSearchHandler={onClickSearchHandler}
                    onChangeInputHandler={onChangeInputHandler}
                    onKeyPressInputHandler={onKeyPressInputHandler} />
                <div>
                    <Select sorting={sorting}
                        categories={categories}
                        handleSelectSorting={handleSelectSorting}
                        handleSelectCategories={handleSelectCategories}
                    />
                </div>
                <Routes>
                    <Route path="/" element={<Navigate to={"/books"} />} />
                    {/* <Route path="/books" element={
                        <Books booksReducer={booksReducer} sortedBooks={sortedBooks} onIndexChanged={onIndexChanged} categories={categories} />
                    } /> */}
                    <Route path="/volume/*" element={<DetailedBookInfo />} />
                    <Route path="/volume/:volumeId" element={<DetailedBookInfo />} />
                </Routes>
            </div>
        )
    }
}

